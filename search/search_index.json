{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>taskwarrior-tui</code>","text":"<p>[!IMPORTANT] <code>taskwarrior</code> v3.x may break <code>taskwarrior-tui</code> features in unexpected ways. Please file a bug report if you encounter a bug.</p> <p>taskwarrior-tui v0.25.4 is the last version supporting taskwarrior v2.x as backend.</p> <p> </p> <p>A Terminal User Interface (TUI) for Taskwarrior that you didn't know you wanted.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>vim-like navigation</li> <li>live filter updates</li> <li>add, delete, complete, log tasks</li> <li>multiple selection</li> <li>tab completion</li> <li>colors based on taskwarrior</li> </ul>"},{"location":"#showcase","title":"Showcase","text":"Demo: (video) User Interface: (gif) Multiple selection: (gif) Tab completion: (gif)"},{"location":"#documentation","title":"Documentation","text":"See https://kdheepak.com/taskwarrior-tui for documentation. <p>See https://kdheepak.com/taskwarrior-tui/installation/ for installation instructions for your platform.</p> <p>See https://kdheepak.com/taskwarrior-tui/quick_start/ to get started.</p> <p>See https://kdheepak.com/taskwarrior-tui/configuration/keys or https://kdheepak.com/taskwarrior-tui/configuration/colors/ for customization options.</p>"},{"location":"#installation","title":"Installation","text":"<p>Unless otherwise specified, you will need to install the latest version of <code>taskwarrior</code> first. See https://taskwarrior.org/download/ for more information.</p> <p>Pre-compiled releases are available on the GitHub repo:</p> <ol> <li>Download the tar.gz file for your OS from the latest release.</li> <li>Unzip the tar.gz file</li> <li>Run with <code>./taskwarrior-tui</code>.</li> </ol> <p>See https://kdheepak.com/taskwarrior-tui/installation/ on instructions for using package managers on various platforms.</p> <p>If you are compiling from source, you'll need to most recent stable rust compiler.</p>"},{"location":"#configuration","title":"Configuration","text":"<p><code>taskwarrior-tui</code> uses <code>taskwarrior</code>'s <code>.taskrc</code> for configuration.</p> <p>See the documentation for more information:</p> <ul> <li>https://kdheepak.com/taskwarrior-tui/configuration/keys</li> <li>https://kdheepak.com/taskwarrior-tui/configuration/colors</li> <li>https://kdheepak.com/taskwarrior-tui/configuration/advanced/</li> </ul> Here is an example `.taskrc` <pre><code>### taskwarrior configuration options\n\n# taskwarrior's configuration\ndata.location=.task\nverbose=affected,blank,context,edit,header,footnote,label,new-id,project,special,sync,recur\nuda.priority.values=H,M,,L\ncolor.alternate=\n\n# taskwarrior-tui reads color attributes from the following to display the same colors of tasks as the CLI\ncolor.tagged=black on rgb444\n\n# Remove age, tags from task next report.\n# taskwarrior-tui reads the labels and columns from these options to display tasks the same way taskwarrior does\nreport.next.labels=ID,Active,Age,Deps,P,Project,Tag,Recur,S,Due,Until,Description,Urg\nreport.next.columns=id,start.age,entry.age,depends,priority,project,tags,recur,scheduled.countdown,due.relative,until.remaining,description.truncated_count,urgency\nreport.next.filter=(status:pending or status:waiting) page:limit\n\n### taskwarrior-tui configuration options\n\nuda.taskwarrior-tui.keyconfig.done=x\nuda.taskwarrior-tui.keyconfig.delete=d\nuda.taskwarrior-tui.shortcuts.1=~/local/bin/task-sync.sh\nuda.taskwarrior-tui.report.next.filter=(status:pending or status:waiting)\n</code></pre>"},{"location":"#references-resources","title":"References / Resources","text":"<p>If you like <code>taskwarrior-tui</code>, please consider donating to</p> <ul> <li><code>kdheepak</code></li> <li><code>@GothenburgBitFactory</code></li> <li>and/or a charity of your choice.</li> </ul> Additional resources <ul> <li>https://github.com/GothenburgBitFactory/taskwarrior</li> <li>https://github.com/GothenburgBitFactory/libshared</li> <li>https://github.com/GothenburgBitFactory/timewarrior</li> <li>https://github.com/fdehau/tui-rs</li> <li>https://github.com/tui-rs-revival/ratatui</li> <li>https://github.com/crossterm-rs/crossterm/</li> <li>https://github.com/async-rs/async-std</li> <li>https://github.com/kkawakam/rustyline</li> <li>https://github.com/vit-project/vit</li> <li>https://github.com/taskchampion/taskchampion/</li> </ul>"},{"location":"faqs/","title":"Frequently Asked Questions (FAQs)","text":""},{"location":"faqs/#does-taskwarrior-tui-show-error-messages-when-running-shell-commands-or-shortcuts","title":"Does <code>taskwarrior-tui</code> show error messages when running shell commands or shortcuts","text":"<p><code>taskwarrior-tui</code> shows an error prompt for shell if:</p> <ol> <li>the subprocess fails</li> <li>the subprocess succeeds but prints to stdout</li> <li>the subprocess is empty</li> </ol> <p><code>taskwarrior-tui</code> shows an error prompt for shortcuts if:</p> <ol> <li>the shortcut fails</li> </ol> <p>If <code>taskwarrior-tui</code> encounters a prompt by the subprocess or the shortcut, <code>taskwarrior-tui</code> will not prompt the user for input again. This means, if you want to run a <code>taskwarrior</code> command as a shell command, you may want to pass <code>rc.confirmation=off</code> in the command. See the following screencast as an example:</p> <pre><code>task rc.confirmation=off context define test project:work\n</code></pre> <p>If you don't add <code>rc.confirmation=off</code> in the shell command, <code>taskwarrior-tui</code> will command the command but it'll fail because it won't receive any prompt.</p>"},{"location":"installation/","title":"Installation","text":"<p>Unless otherwise specified, you will need to install <code>taskwarrior</code> first. See https://taskwarrior.org/download/ for more information.</p> <p>Manual ( Recommended )  </p> <ol> <li>Download the tar.gz file for your OS from the latest release.</li> <li>Unzip the tar.gz file</li> <li>Run with <code>./taskwarrior-tui</code>.</li> </ol> <p>Install from source </p> <pre><code>git clone https://github.com/kdheepak/taskwarrior-tui.git\ncd taskwarrior-tui\ncargo build --release\n</code></pre> <p>Using <code>brew</code> </p> <p>This installs <code>task</code> from <code>homebrew</code> as well.</p> <pre><code>brew install taskwarrior-tui\n</code></pre> <p>Installation for Arch Linux </p> <p>Use pacman to install it from the extra repository:</p> <pre><code>pacman -S taskwarrior-tui\n</code></pre> <p>Or use your favorite AUR helper to download the git package maintained by @loki7990. For example:</p> <pre><code>yay -S taskwarrior-tui-git # build from source\n</code></pre> <p>Using <code>snap</code> </p> <pre><code>snap install taskwarrior-tui\n</code></pre> <p>Using <code>zdharma-continuum/zinit</code> </p> <p>Add the following to your <code>~/.zshrc</code>:</p> <pre><code>zinit ice wait:2 lucid extract\"\" from\"gh-r\" as\"command\" mv\"taskwarrior-tui* -&gt; tt\"\nzinit load kdheepak/taskwarrior-tui\n</code></pre>"},{"location":"keybindings/","title":"Default Keybindings","text":"<p>Keybindings:</p> <pre><code>Esc:                                 - Exit current action\n\n]: Next view                         - Go to next view\n\n[: Previous view                     - Go to previous view\n</code></pre> <p>Keybindings for task report:</p> <pre><code>/: task {string}                     - Filter task report\n\na: task add {string}                 - Add new task\n\nd: task {selected} done              - Mark task as done\n\ne: task {selected} edit              - Open selected task in editor\n\ny: task {selected} duplicate         - Duplicate tasks\n\nj: {selected+=1}                     - Move down in task report\n\nk: {selected-=1}                     - Move up in task report\n\nJ: {selected+=pageheight}            - Move page down in task report\n\nK: {selected-=pageheight}            - Move page up in task report\n\ng: {selected=first}                  - Go to top\n\nG: {selected=last}                   - Go to bottom\n\nl: task log {string}                 - Log new task\n\nm: task {selected} modify {string}   - Modify selected task\n\nq: exit                              - Quit\n\ns: task {selected} start/stop        - Toggle start and stop\n\nt: task {selected} +{tag}/-{tag}     - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: `next`)\n\nu: task undo                         - Undo\n\nv: {toggle mark on selected}         - Toggle mark on selected\n\nV: {toggle marks on all tasks}       - Toggle marks on all tasks in current filter report\n\nx: task {selected} delete            - Delete\n\nz: toggle task info                  - Toggle task info view\n\nA: task {selected} annotate {string} - Annotate current task\n\nCtrl-e: scroll down task details     - Scroll task details view down one line\n\nCtrl-y: scroll up task details       - Scroll task details view up one line\n\n!: {string}                          - Custom shell command\n\n1-9: {string}                        - Run user defined shortcuts\n\n:: {task id}                         - Jump to task id\n\nc: context switcher menu             - Open context switcher menu\n\n?: help                              - Help menu\n</code></pre> <p>Keybindings for filter / command prompt:</p> <pre><code>Ctrl + f | Right: move forward       - Move forward one character\n\nCtrl + b | Left: move backward       - Move backward one character\n\nCtrl + h | Backspace: backspace      - Delete one character back\n\nCtrl + d | Delete: delete            - Delete one character forward\n\nCtrl + a | Home: home                - Go to the beginning of line\n\nCtrl + e | End: end                  - Go to the end of line\n\nCtrl + k: delete to end              - Delete to the end of line\n\nCtrl + u: delete to beginning        - Delete to the beginning of line\n\nCtrl + w: delete previous word       - Delete previous word\n\nAlt + d: delete next word            - Delete next word\n\nAlt + b: move to previous word       - Move to previous word\n\nAlt + f: move to next word           - Move to next word\n\nAlt + t: transpose words             - Transpose words\n\nUp: scroll history                   - Go backward in history matching from beginning of line to cursor\n\nDown: scroll history                 - Go forward in history matching from beginning of line to cursor\n\nTAB | Ctrl + n: tab complete         - Open tab completion and selection first element OR cycle to next element\n\nBACKTAB | Ctrl + p: tab complete     - Cycle to previous element\n</code></pre> <p>Keybindings for context switcher:</p> <pre><code>j: {selected+=1}                     - Move forward a context\n\nk: {selected-=1}                     - Move back a context\n\nEnter: task context {selected}       - Select highlighted context\n</code></pre> <p>Keybindings for calendar:</p> <pre><code>j: {selected+=1}                     - Move forward a year in calendar\n\nk: {selected-=1}                     - Move back a year in calendar\n\nJ: {selected+=10}                    - Move forward a decade in calendar\n\nK: {selected-=10}                    - Move back a decade in calendar\n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":"<ol> <li>Install <code>taskwarrior</code> and <code>taskwarrior-tui</code>.</li> <li>Run the following in a shell.     <code>$ taskwarrior-tui</code></li> <li>Use <code>vim</code> like keys to navigate your task list. Press <code>?</code> for more information.</li> </ol> <p>Tip: Alias <code>tt</code> to <code>taskwarrior-tui</code>.</p> <p>Add the following to your dotfiles (e.g. <code>~/.bashrc</code>, <code>~/.zshrc</code>):</p> <pre><code>alias tt=\"taskwarrior-tui\"\n</code></pre> <p></p>"},{"location":"taskwarrior-tui.1/","title":"Taskwarrior tui.1","text":"<p>% taskwarrior-tui(1)</p>"},{"location":"taskwarrior-tui.1/#name","title":"NAME","text":"<p>taskwarrior-tui \u2014 A terminal user interface for taskwarrior (https://github.com/kdheepak/taskwarrior-tui)</p>"},{"location":"taskwarrior-tui.1/#synopsis","title":"SYNOPSIS","text":"<p><code>taskwarrior-tui</code></p> <p><code>taskwarrior-tui</code> is a terminal user interface for <code>taskwarrior</code>.</p>"},{"location":"taskwarrior-tui.1/#examples","title":"EXAMPLES","text":"<p><code>taskwarrior-tui</code> : Starts a terminal user interface for <code>taskwarrior</code>.</p> <p><code>alias tt=taskwarrior-tui</code> : Add the above to your dotfiles to use <code>tt</code> to start <code>taskwarrior-tui</code>.</p>"},{"location":"taskwarrior-tui.1/#keybindings","title":"KEYBINDINGS","text":"<p>Keybindings:</p> <p><code>Esc</code> : Exit current action</p> <p><code>]</code> : Next view                         - Go to next view</p> <p><code>[</code> : Previous view                     - Go to previous view</p> <p>Keybindings for task report:</p> <p><code>/</code> : task {string}                     - Filter task report</p> <p><code>a</code> : task add {string}                 - Add new task</p> <p><code>d</code> : task {selected} done              - Mark task as done</p> <p><code>e</code> : task {selected} edit              - Open selected task in editor</p> <p><code>j</code> : {selected+=1}                     - Move down in task report</p> <p><code>k</code> : {selected-=1}                     - Move up in task report</p> <p><code>J</code> : {selected+=pageheight}            - Move page down in task report</p> <p><code>K</code> : {selected-=pageheight}            - Move page up in task report</p> <p><code>g</code> : {selected=first}                  - Go to top</p> <p><code>G</code> : {selected=last}                   - Go to bottom</p> <p><code>l</code> : task log {string}                 - Log new task</p> <p><code>m</code> : task {selected} modify {string}   - Modify selected task</p> <p><code>q</code> : exit                              - Quit</p> <p><code>s</code> : task {selected} start/stop        - Toggle start and stop</p> <p><code>t</code> : task {selected} +{tag}/-{tag}     - Toggle {uda.taskwarrior-tui.quick-tag.name} (default: <code>next</code>)</p> <p><code>u</code> : task undo                         - Undo</p> <p><code>v</code> : {toggle mark on selected}         - Toggle mark on selected</p> <p><code>V</code> : {toggle marks on all tasks}       - Toggle marks on all tasks in current filter report</p> <p><code>x</code> : task delete {selected}            - Delete</p> <p><code>z</code> : toggle task info                  - Toggle task info view</p> <p><code>A</code> : task {selected} annotate {string} - Annotate current task</p> <p>Ctrl-e : scroll down task details          - Scroll task details view down one line</p> <p>Ctrl-y : scroll up task details            - Scroll task details view up one line</p> <p><code>!</code> : {string}                          - Custom shell command</p> <p><code>1-9</code> : {string}                          - Run user defined shortcuts</p> <p><code>:</code> : {task id}                         - Jump to task id</p> <p><code>c</code> : context switcher menu             - Open context switcher menu</p> <p><code>?</code> : help                              - Help menu</p> <p>Keybindings for filter / command prompt:</p> <p><code>Ctrl + f | Right</code> : move forward                      - Move forward one character</p> <p><code>Ctrl + b | Left</code> : move backward                     - Move backward one character</p> <p><code>Ctrl + h | Backspace</code> : backspace                         - Delete one character back</p> <p><code>Ctrl + d | Delete</code> : delete                            - Delete one character forward</p> <p><code>Ctrl + a | Home</code> : home                              - Go to the beginning of line</p> <p><code>Ctrl + e | End</code> : end                               - Go to the end of line</p> <p><code>Ctrl + k</code> : delete to end                     - Delete to the end of line</p> <p><code>Ctrl + u</code> : delete to beginning               - Delete to the beginning of line</p> <p><code>Ctrl + w</code> : delete previous word              - Delete previous word</p> <p><code>Alt + d</code> : delete next word                  - Delete next word</p> <p><code>Alt + b</code> : move to previous word             - Move to previous word</p> <p><code>Alt + f</code> : move to next word                 - Move to next word</p> <p><code>Alt + t</code> : transpose words                   - Transpose words</p> <p><code>Up</code> : scroll history                    - Go backward in history matching from beginning of line to cursor</p> <p><code>Down</code> : scroll history                    - Go forward in history matching from beginning of line to cursor</p> <p><code>TAB | Ctrl + n</code> : tab complete                      - Open tab completion and selection first element OR cycle to next element</p> <p><code>BACKTAB | Ctrl + p</code> : tab complete                      - Cycle to previous element</p> <p>Keybindings for context switcher:</p> <p><code>j</code> : {selected+=1}                     - Move forward a context</p> <p><code>k</code> : {selected-=1}                     - Move back a context</p> <p>Keybindings for calendar:</p> <p><code>j</code> : {selected+=1}                     - Move forward a year in calendar</p> <p><code>k</code> : {selected-=1}                     - Move back a year in calendar</p> <p><code>J</code> : {selected+=10}                    - Move forward a decade in calendar</p> <p><code>K</code> : {selected-=10}                    - Move back a decade in calendar</p>"},{"location":"taskwarrior-tui.1/#exit-statuses","title":"EXIT STATUSES","text":"<p>0 : If everything goes OK.</p>"},{"location":"taskwarrior-tui.1/#author","title":"AUTHOR","text":"<p><code>taskwarrior-tui</code> is maintained by Dheepak \u2018kdheepak\u2019 Krishnamurthy and other contributors.</p> <p>Source code: <code>https://github.com/kdheepak/taskwarrior-tui/</code> \\ Contributors: <code>https://github.com/kdheepak/taskwarrior-tui/graphs/contributors</code></p>"},{"location":"configuration/advanced/","title":"Advanced configuration","text":"<p><code>taskwarrior-tui</code> parses the output of <code>task show</code> to get configuration data. This allows <code>taskwarrior-tui</code> to use the same defaults as <code>taskwarrior</code> and configure additional options as required.</p>"},{"location":"configuration/advanced/#taskrc-config-file-options","title":"<code>taskrc</code> config file options:","text":"<p>Other <code>taskwarrior-tui</code> configuration options are possible using the user defined attribute feature of <code>taskwarrior</code>. All <code>taskwarrior-tui</code> specific configuration options will begin with <code>uda.taskwarrior-tui.</code>. The following is a full list of all the options available and their default values implemented by <code>taskwarrior-tui</code> if not defined in your <code>taskrc</code> file.</p> <pre><code>uda.taskwarrior-tui.selection.indicator=\u2022\nuda.taskwarrior-tui.selection.bold=yes\nuda.taskwarrior-tui.selection.italic=no\nuda.taskwarrior-tui.selection.dim=no\nuda.taskwarrior-tui.selection.blink=no\nuda.taskwarrior-tui.selection.reverse=no\nuda.taskwarrior-tui.mark.indicator=\u2714\nuda.taskwarrior-tui.unmark.indicator=\nuda.taskwarrior-tui.mark-selection.indicator=\u29bf\nuda.taskwarrior-tui.unmark-selection.indicator=\u29be\nuda.taskwarrior-tui.calendar.months-per-row=4\nuda.taskwarrior-tui.task-report.show-info=true\nuda.taskwarrior-tui.task-report.looping=true\nuda.taskwarrior-tui.task-report.jump-on-task-add=true\nuda.taskwarrior-tui.task-report.prompt-on-undo=false\nuda.taskwarrior-tui.task-report.prompt-on-delete=false\nuda.taskwarrior-tui.task-report.prompt-on-done=false\nuda.taskwarrior-tui.style.report.selection=\nuda.taskwarrior-tui.style.context.active=black on rgb444\nuda.taskwarrior-tui.style.calendar.title=black on rgb444\nuda.taskwarrior-tui.style.report.scrollbar=black\nuda.taskwarrior-tui.scrollbar.indicator=\u2588\nuda.taskwarrior-tui.style.report.scrollbar.area=white\nuda.taskwarrior-tui.scrollbar.area=\u2551\nuda.taskwarrior-tui.task-report.next.filter=$(task show report.next.filter)\nuda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-add=true\nuda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-annotate=true\nuda.taskwarrior-tui.task-report.auto-insert-double-quotes-on-log=true\nuda.taskwarrior-tui.task-report.reset-filter-on-esc=true\nuda.taskwarrior-tui.context-menu.select-on-move=false\nuda.taskwarrior-tui.tabs.change-focus-rotate=false\n</code></pre> <p>The <code>uda.taskwarrior-tui.task-report.next.filter</code> variable defines the default view at program startup. Set this to any preconfigured report (<code>task reports</code>), or create your own report in taskwarrior and specify its name here.</p>"},{"location":"configuration/advanced/#commandline-options","title":"commandline options:","text":"<p><code>-r</code>: specify a report to be shown, overrides <code>uda.taskwarrior-tui.task-report.next.filter</code> for this instance</p>"},{"location":"configuration/advanced/#configure-user-defined-shortcuts","title":"Configure user defined shortcuts:","text":"<p>You can configure shortcuts to execute custom commands from your <code>taskwarrior</code>'s <code>taskrc</code> file (default: <code>~/.taskrc</code>). You can do this by mapping a shortcut to an executable file:</p> <pre><code>uda.taskwarrior-tui.shortcuts.1=~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh\nuda.taskwarrior-tui.shortcuts.2=~/.config/taskwarrior-tui/shortcut-scripts/sync.sh\n...\n</code></pre> <p>The executable file can be placed in any location.</p> <p>To make a file executable:</p> <ol> <li>Run <code>chmod +x /path/to/script</code> to modify the executable flag.</li> <li>Add <code>#!/usr/bin/env bash</code>, <code>#!/usr/bin/env python</code> or whatever is appropriate for your script.</li> </ol> <p>By default, keys <code>1</code>-<code>9</code> are available to run shortcuts.</p> <p>When you hit the shortcut, the script will be executed with the <code>selected_tasks_uuid</code> as an argument:</p> <pre><code>~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh $selected_tasks_uuid\n</code></pre> <p>For example, you can add the <code>personal</code> tag to the currently selected task with the following script in <code>~/.config/taskwarrior-tui/shortcut-scripts/add-personal-tag.sh</code> :</p> <pre><code>task rc.bulk=0 rc.confirmation=off rc.dependency.confirmation=off rc.recurrence.confirmation=off \"$@\" modify +personal\n</code></pre> <p>By default, shortcuts are linked to the <code>1-9</code> number row keys. They can be customized as any other keys through <code>uda.taskwarrior-tui.keyconfig.shortcut1=&lt;key&gt;</code>. For example:</p> <pre><code>uda.taskwarrior-tui.keyconfig.shortcut1=n\n</code></pre> <p>You can set up shortcuts to run <code>task sync</code> or any custom bash script that you'd like.</p>"},{"location":"configuration/advanced/#configure-one-background-task","title":"Configure one background task","text":"<p>You can configure one background task to run periodically:</p> <pre><code>uda.taskwarrior-tui.background_process=task sync\nuda.taskwarrior-tui.background_process_period=60\n</code></pre> <p>This will run <code>task sync</code> every 60 seconds. If the <code>background_process</code> is an empty string (default), then no process will be run. Only if the <code>background_process</code> is defined and if the <code>background_process</code> runs successfully, it'll be run every <code>background_process_period</code> number of seconds (default: 60 seconds). However, if it fails even once it won't be run again till <code>taskwarrior-tui</code> is restarted.</p>"},{"location":"configuration/colors/","title":"Color configuration","text":"<p><code>taskwarrior-tui</code> reads values from your <code>taskwarrior</code>'s <code>taskrc</code> file (default: <code>~/.taskrc</code>).</p> <p></p> <p>For example, <code>color.active</code> is used to style the active task. If you would like to try it, open your <code>taskrc</code> file and change <code>color.active=white on blue</code>.</p> <p>So <code>color.active</code> will take precedence over <code>color.overdue</code>. You can see what <code>color.active</code> is by running <code>task show color.active</code> in your favorite shell prompt.</p> <p>The following color attributes are supported:</p> <pre><code>color.deleted\ncolor.completed\ncolor.active\ncolor.overdue\ncolor.scheduled\ncolor.due.today\ncolor.due\ncolor.blocked\ncolor.blocking\ncolor.recurring\ncolor.tagged\n</code></pre>"},{"location":"configuration/keys/","title":"Key configuration","text":"<p>Configure <code>taskwarrior-tui</code> using <code>~/.taskrc</code>:</p> <p><code>taskwarrior-tui</code> reads values from your <code>taskwarrior</code>'s <code>taskrc</code> file (default: <code>~/.taskrc</code>).</p> <pre><code>uda.taskwarrior-tui.keyconfig.quit=q\nuda.taskwarrior-tui.keyconfig.refresh=r\nuda.taskwarrior-tui.keyconfig.go-to-bottom=G\nuda.taskwarrior-tui.keyconfig.go-to-top=g\nuda.taskwarrior-tui.keyconfig.down=j\nuda.taskwarrior-tui.keyconfig.up=k\nuda.taskwarrior-tui.keyconfig.page-down=J\nuda.taskwarrior-tui.keyconfig.page-up=K\nuda.taskwarrior-tui.keyconfig.delete=x\nuda.taskwarrior-tui.keyconfig.done=d\nuda.taskwarrior-tui.keyconfig.start-stop=s\nuda.taskwarrior-tui.keyconfig.quick-tag=t\nuda.taskwarrior-tui.keyconfig.undo=u\nuda.taskwarrior-tui.keyconfig.edit=e\nuda.taskwarrior-tui.keyconfig.modify=m\nuda.taskwarrior-tui.keyconfig.shell=!\nuda.taskwarrior-tui.keyconfig.log=l\nuda.taskwarrior-tui.keyconfig.add=a\nuda.taskwarrior-tui.keyconfig.annotate=A\nuda.taskwarrior-tui.keyconfig.filter=/\nuda.taskwarrior-tui.keyconfig.zoom=z\nuda.taskwarrior-tui.keyconfig.context-menu=c\nuda.taskwarrior-tui.keyconfig.next-tab=]\nuda.taskwarrior-tui.keyconfig.previous-tab=[\n</code></pre>"},{"location":"developer/guide/","title":"Developer guide","text":""},{"location":"developer/guide/#running-tests","title":"Running tests","text":"<pre><code>git clone https://github.com/kdheepak/taskwarrior-tui\ncd taskwarrior-tui\n\ngit clone https://github.com/kdheepak/taskwarrior-testdata tests/data\nsource .envrc\n\ncargo test\n</code></pre>"},{"location":"developer/guide/#running-debug-build","title":"Running debug build","text":"<pre><code>cargo run\n</code></pre>"},{"location":"developer/guide/#running-release-build","title":"Running release build","text":"<pre><code>cargo run --release\n</code></pre>"},{"location":"developer/guide/#testing-individual-function","title":"Testing individual function","text":"<p>If you want to test the <code>test_taskwarrior_timing</code> function in <code>src/app.rs</code>:</p> <pre><code>cargo test -- app::tests::test_taskwarrior_timing --nocapture\n</code></pre>"},{"location":"developer/guide/#getting-logs","title":"Getting logs","text":"<pre><code>export TASKWARRIOR_TUI_LOG_LEVEL=debug\ntaskwarrior-tui\n\n# OR\n\nexport TASKWARRIOR_TUI_LOG_LEVEL=trace\ncargo run\n</code></pre>"},{"location":"developer/guide/#contributing-to-documentation","title":"Contributing to documentation","text":"<p>See <code>docs/</code> folder in the repository: https://github.com/kdheepak/taskwarrior-tui</p> <p>When you make a PR to the repository, a preview of the documentation is rendered and a link is posted to the PR.</p>"},{"location":"developer/guide/#internals-of-taskwarrior-tui","title":"Internals of <code>taskwarrior-tui</code>","text":"<p><code>taskwarrior-tui</code> is a state driven terminal user interface. Keyboard events are read asynchronously and is communicated using channels. Most of the logic is implemented in <code>src/app.rs</code>. The difference between the previous state and the current state of the TUI is rendered every <code>Tick</code> by <code>tui-rs</code>. <code>app.draw_...</code> functions are responsible for rendering the UI. Actions for key presses are taken in <code>app.handle_input(&amp;mut self, input: Key)</code>.</p>"}]}